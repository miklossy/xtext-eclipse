/**
 * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.eclipse.xtext.example.domainmodel.tests.visualization;

import javax.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.example.domainmodel.tests.DomainmodelInjectorProvider;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.testing.CompilationTestHelper;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(DomainmodelInjectorProvider.class)
@SuppressWarnings("all")
public class DomainmodelDotGeneratorTest {
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;
  
  @Test
  public void test01() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test02() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("entity E {}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("E [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("E|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test03() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("entity Blog {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("post : String");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Blog [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Blog|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("post : String\\l|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test04() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.List");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity Blog {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("post : List<String>");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Blog [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Blog|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("post : List\\<String\\>\\l|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test05() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.List");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity E {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("p1 : String");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("p2 : List<String>");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("E [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("E|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("p1 : String\\lp2 : List\\<String\\>\\l|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test06() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("entity A {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity B {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("p : A");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("A [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("A|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("B [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("B|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("B -> A [headlabel=\"p\\n1\"]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test07() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("entity A {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("p : B");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity B {}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("A [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("A|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("B [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("B|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("A -> B [headlabel=\"p\\n1\"]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test08() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("entity A {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("p : A");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("A [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("A|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("A -> A [headlabel=\"p\\n1\"]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test09() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.List");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity A {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("p : List<B>");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity B {}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("A [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("A|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("B [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("B|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("A -> B [headlabel=\"p\\n[0..*]\"]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test10() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.List");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity A {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("p : List<B>");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity B {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("p : List<A>");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("A [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("A|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("B [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("B|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("A -> B [headlabel=\"p\\n[0..*]\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("B -> A [headlabel=\"p\\n[0..*]\"]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test11() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.List");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity A {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("p1 : List<A>");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("p2 : A");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("A [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("A|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("A -> A [headlabel=\"p1\\n[0..*]\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("A -> A [headlabel=\"p2\\n1\"]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test12() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("entity A {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity B extends A {}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("A [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("A|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("B [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("B|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("B -> A");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test13() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.List");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity Blog {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("title: String");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("posts: List<Post>");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("op addPost(Post post) : void { }");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("op getPosts() : List<Post> {}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity HasAuthor {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("author: String");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("op getAuthor() : String {}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("op setAuthor() : void {}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity Post extends HasAuthor {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("title: String");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("content: String");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("comments: List<Comment>");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity Comment extends HasAuthor {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("content: String");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Blog [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Blog|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("title : String\\l|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("addPost(Post post) : void\\lgetPosts() : List\\<Post\\>\\l");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("HasAuthor [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("HasAuthor|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("author : String\\l|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("getAuthor() : String\\lsetAuthor() : void\\l");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Post [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Post|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("title : String\\lcontent : String\\l|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Comment [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Comment|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("content : String\\l|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Post -> HasAuthor");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Comment -> HasAuthor");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Blog -> Post [headlabel=\"posts\\n[0..*]\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Post -> Comment [headlabel=\"comments\\n[0..*]\"]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test14() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.List");
      _builder.newLine();
      _builder.append(" ");
      _builder.newLine();
      _builder.append("entity Person {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("name: String");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("firstName: String");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("friends: List<Person>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("address : Address");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity Address {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("street: String");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("zip: String");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("city: String");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Person [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Person|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("name : String\\lfirstName : String\\l|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Address [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Address|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("street : String\\lzip : String\\lcity : String\\l|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Person -> Person [headlabel=\"friends\\n[0..*]\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Person -> Address [headlabel=\"address\\n1\"]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test15() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.List");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity A {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("names : List<String>");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("c : C");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity B {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("something : String");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("myA : List<A>");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity C {");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("A [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("A|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("names : List\\<String\\>\\l|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("B [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("B|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("something : String\\l|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("C [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("C|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("A -> C [headlabel=\"c\\n1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("B -> A [headlabel=\"myA\\n[0..*]\"]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test16() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.List");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity Gender {}");
      _builder.newLine();
      _builder.append("entity Mother {}");
      _builder.newLine();
      _builder.append("entity Son {}");
      _builder.newLine();
      _builder.append("entity Daughter {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity Father {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("id: String");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("name: String");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("gender:Gender");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("wife: Mother");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("sons: List <Son>");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("daughters: List <Daughter>");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("hobbyList: List<String>");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Gender [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Gender|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Mother [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Mother|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Son [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Son|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Daughter [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Daughter|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Father [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Father|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("id : String\\lname : String\\lhobbyList : List\\<String\\>\\l|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Father -> Gender [headlabel=\"gender\\n1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Father -> Mother [headlabel=\"wife\\n1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Father -> Son [headlabel=\"sons\\n[0..*]\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Father -> Daughter [headlabel=\"daughters\\n[0..*]\"]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test17() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.List");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity Gender {}");
      _builder.newLine();
      _builder.append("entity Mother {}");
      _builder.newLine();
      _builder.append("entity Son {}");
      _builder.newLine();
      _builder.append("entity Daughter {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity Father {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("id: String");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("name: String");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("gender:Gender");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("wife: Mother");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("sons: List <Son>");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("daughters: List <Daughter>");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("hobbyList: List<String>");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("op activityInOneDay(): void {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("getUp();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("haveBreakfast();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("workAtHome();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("haveLunch();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("op getUp(): void {}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("op haveBreakfast(): void {}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("op workAtHome(): void {}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("op haveLunch(): void {}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Gender [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Gender|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Mother [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Mother|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Son [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Son|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Daughter [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Daughter|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Father [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Father|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("id : String\\lname : String\\lhobbyList : List\\<String\\>\\l|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("activityInOneDay() : void\\lgetUp() : void\\lhaveBreakfast() : void\\lworkAtHome() : void\\lhaveLunch() : void\\l");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Father -> Gender [headlabel=\"gender\\n1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Father -> Mother [headlabel=\"wife\\n1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Father -> Son [headlabel=\"sons\\n[0..*]\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Father -> Daughter [headlabel=\"daughters\\n[0..*]\"]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test18() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.List");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity Person {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("op a() : void {}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("op b() : String {}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("op c() : Person {}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("op d() : List<String> {}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("op e() : List<Person> {}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Person [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Person|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("a() : void\\lb() : String\\lc() : Person\\ld() : List\\<String\\>\\le() : List\\<Person\\>\\l");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test19() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.List");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity Person {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("op a() : void {}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("op b() : String {}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("op c(String p1) : Person {}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("op d(String p1, int p2) : List<String> {}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("op e(Person p1, List<Person> p2) : List<Person> {}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Person [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Person|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("a() : void\\lb() : String\\lc(String p1) : Person\\ld(String p1, int p2) : List\\<String\\>\\le(Person p1, List\\<Person\\> p2) : List\\<Person\\>\\l");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test20() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.List");
      _builder.newLine();
      _builder.append("     ");
      _builder.newLine();
      _builder.append("entity Person {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("name: String");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("firstName: String");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("friends: List<Person>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("address : Address");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("op getFullName() : String {");
      _builder.newLine();
      _builder.append("       ");
      _builder.append("// return firstName + \" \" + name;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("op getFriendsSortedByFullName() : List<Person> {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("// return friends.sortBy[ f | f.fullName ]");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity Address {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("street: String");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("zip: String");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("city: String");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// layout=sfdp");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("nodesep=1.2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rankdir=BT");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node [shape=record style=filled fillcolor=\"#FAEAC1\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Person [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Person|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("name : String\\lfirstName : String\\l|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("getFullName() : String\\lgetFriendsSortedByFullName() : List\\<Person\\>\\l");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Address [");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label = \"{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("Address|");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("street : String\\lzip : String\\lcity : String\\l|");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// inheritance edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=onormal]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// association edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=normal arrowtail=diamond dir=both constraint=false]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Person -> Person [headlabel=\"friends\\n[0..*]\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Person -> Address [headlabel=\"address\\n1\"]");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
