/**
 * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.eclipse.xtext.example.arithmetics.tests.visualization;

import javax.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.example.arithmetics.tests.ArithmeticsInjectorProvider;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.testing.CompilationTestHelper;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(ArithmeticsInjectorProvider.class)
@SuppressWarnings("all")
public class ArithmeticsDotGeneratorTest {
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;
  
  @Test
  public void test01() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test02() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module arithmetics");
      _builder.newLine();
      _builder.append("1;");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1[label=\"1\" tooltip=1 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// forward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=vee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// backward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("edge[arrowhead=normal color=green4 style=dashed]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test03() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module arithmetics");
      _builder.newLine();
      _builder.append("1+2;");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1[label=\"+\" tooltip=3]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2[label=\"1\" tooltip=1 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("3[label=\"2\" tooltip=2 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// forward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=vee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->3");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// backward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("edge[arrowhead=normal color=green4 style=dashed]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2->1[label=1]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("3->1[label=2]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test04() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module arithmetics");
      _builder.newLine();
      _builder.append("1+2+3;");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1[label=\"+\" tooltip=6]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2[label=\"+\" tooltip=3]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("3[label=\"1\" tooltip=1 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("4[label=\"2\" tooltip=2 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("5[label=\"3\" tooltip=3 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// forward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=vee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->5");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2->3");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2->4");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// backward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("edge[arrowhead=normal color=green4 style=dashed]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2->1[label=3]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("5->1[label=3]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("3->2[label=1]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("4->2[label=2]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test05() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module arithmetics");
      _builder.newLine();
      _builder.append("1 + 2 - 3;");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1[label=\"-\" tooltip=0]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2[label=\"+\" tooltip=3]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("3[label=\"1\" tooltip=1 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("4[label=\"2\" tooltip=2 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("5[label=\"3\" tooltip=3 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// forward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=vee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->5");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2->3");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2->4");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// backward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("edge[arrowhead=normal color=green4 style=dashed]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2->1[label=3]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("5->1[label=3]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("3->2[label=1]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("4->2[label=2]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test06() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module arithmetics");
      _builder.newLine();
      _builder.append("1 * 2 + 3;");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1[label=\"+\" tooltip=5]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2[label=\"*\" tooltip=2]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("3[label=\"1\" tooltip=1 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("4[label=\"2\" tooltip=2 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("5[label=\"3\" tooltip=3 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// forward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=vee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->5");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2->3");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2->4");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// backward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("edge[arrowhead=normal color=green4 style=dashed]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2->1[label=2]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("5->1[label=3]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("3->2[label=1]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("4->2[label=2]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test07() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module arithmetics");
      _builder.newLine();
      _builder.append("1 - 2 - 3;");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1[label=\"-\" tooltip=-4]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2[label=\"-\" tooltip=-1]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("3[label=\"1\" tooltip=1 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("4[label=\"2\" tooltip=2 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("5[label=\"3\" tooltip=3 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// forward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=vee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->5");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2->3");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2->4");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// backward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("edge[arrowhead=normal color=green4 style=dashed]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2->1[label=-1]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("5->1[label=3]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("3->2[label=1]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("4->2[label=2]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test08() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module arithmetics");
      _builder.newLine();
      _builder.append("1 / 2 * 3;");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1[label=\"*\" tooltip=1.5]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2[label=\"/\" tooltip=0.5]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("3[label=\"1\" tooltip=1 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("4[label=\"2\" tooltip=2 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("5[label=\"3\" tooltip=3 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// forward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=vee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->5");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2->3");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2->4");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// backward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("edge[arrowhead=normal color=green4 style=dashed]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2->1[label=0.5]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("5->1[label=3]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("3->2[label=1]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("4->2[label=2]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test09() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module arithmetics");
      _builder.newLine();
      _builder.append("12*(5-6) + 108/2;");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1[label=\"+\" tooltip=42]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2[label=\"*\" tooltip=-12]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("3[label=\"12\" tooltip=12 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("4[label=\"-\" tooltip=-1]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("5[label=\"5\" tooltip=5 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("6[label=\"6\" tooltip=6 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("7[label=\"/\" tooltip=54]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("8[label=\"108\" tooltip=108 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("9[label=\"2\" tooltip=2 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// forward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=vee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->7");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2->3");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2->4");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("4->5");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("4->6");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("7->8");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("7->9");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// backward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("edge[arrowhead=normal color=green4 style=dashed]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2->1[label=-12]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("7->1[label=54]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("3->2[label=12]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("4->2[label=-1]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("5->4[label=5]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("6->4[label=6]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("8->7[label=108]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("9->7[label=2]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test10() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module arithmetics");
      _builder.newLine();
      _builder.append("1*2-3;");
      _builder.newLine();
      _builder.append("1*(2-3);");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1[label=\"-\" tooltip=-1]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2[label=\"*\" tooltip=2]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("3[label=\"1\" tooltip=1 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("4[label=\"2\" tooltip=2 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("5[label=\"3\" tooltip=3 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("6[label=\"*\" tooltip=-1]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("7[label=\"1\" tooltip=1 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("8[label=\"-\" tooltip=-1]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("9[label=\"2\" tooltip=2 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("10[label=\"3\" tooltip=3 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// forward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=vee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->5");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2->3");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2->4");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("6->7");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("6->8");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("8->9");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("8->10");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// backward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("edge[arrowhead=normal color=green4 style=dashed]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2->1[label=2]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("5->1[label=3]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("3->2[label=1]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("4->2[label=2]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("7->6[label=1]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("8->6[label=-1]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("9->8[label=2]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("10->8[label=3]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test11() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module arithmetics");
      _builder.newLine();
      _builder.newLine();
      _builder.append("def pi: 3.14;");
      _builder.newLine();
      _builder.append("pi * 4;");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1[label=\"*\" tooltip=12.56]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2[label=\"pi\" tooltip=3.14 shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("3[label=\"4\" tooltip=4 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// forward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=vee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->3");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// backward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("edge[arrowhead=normal color=green4 style=dashed]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2->1[label=3.14]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("3->1[label=4]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// subgraphs");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("subgraph cluster_pi {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label=\"pi\"");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("4[label=\"3.14\" tooltip=3.14 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test12() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module arithmetics");
      _builder.newLine();
      _builder.newLine();
      _builder.append("def a:2;");
      _builder.newLine();
      _builder.append("def b:1;");
      _builder.newLine();
      _builder.append("a+b;");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1[label=\"+\" tooltip=3]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2[label=\"a\" tooltip=2 shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("3[label=\"b\" tooltip=1 shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// forward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=vee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->3");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// backward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("edge[arrowhead=normal color=green4 style=dashed]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2->1[label=2]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("3->1[label=1]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// subgraphs");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("subgraph cluster_a {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label=\"a\"");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("4[label=\"2\" tooltip=2 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("subgraph cluster_b {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label=\"b\"");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("5[label=\"1\" tooltip=1 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test13() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module arithmetics");
      _builder.newLine();
      _builder.newLine();
      _builder.append("def multiply(a, b) : a * b;");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// subgraphs");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("subgraph cluster_multiply {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label=\"multiply\"");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("1[label=\"*\"]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2[label=\"a\" shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("3[label=\"b\" shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("1->2");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("1->3");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test14() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module arithmetics");
      _builder.newLine();
      _builder.newLine();
      _builder.append("def multiply(a, b) : a * b;");
      _builder.newLine();
      _builder.append("multiply(2,3);");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1[label=\"multiply(2,3)\" tooltip=6 shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// forward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=vee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// backward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("edge[arrowhead=normal color=green4 style=dashed]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// subgraphs");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("subgraph cluster_multiply {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label=\"multiply\"");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2[label=\"*\"]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("3[label=\"a\" shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("4[label=\"b\" shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2->3");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2->4");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test15() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module arithmetics");
      _builder.newLine();
      _builder.newLine();
      _builder.append("def boxVolume(l,w,h): l*w*h;");
      _builder.newLine();
      _builder.append("def cubeVolume(l): boxVolume(l,l,l);");
      _builder.newLine();
      _builder.newLine();
      _builder.append("cubeVolume(10);");
      _builder.newLine();
      _builder.append("cubeVolume(2);");
      _builder.newLine();
      _builder.append("boxVolume(1,3,5);");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1[label=\"cubeVolume(10)\" tooltip=1000 shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2[label=\"cubeVolume(2)\" tooltip=8 shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("3[label=\"boxVolume(1,3,5)\" tooltip=15 shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// forward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=vee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// backward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("edge[arrowhead=normal color=green4 style=dashed]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// subgraphs");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("subgraph cluster_boxVolume {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label=\"boxVolume\"");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("4[label=\"*\"]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("5[label=\"*\"]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("6[label=\"l\" shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("7[label=\"w\" shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("8[label=\"h\" shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("4->5");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("4->8");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("5->6");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("5->7");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("subgraph cluster_cubeVolume {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label=\"cubeVolume\"");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("9[label=\"boxVolume(l,l,l)\" shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test16() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module arithmetics");
      _builder.newLine();
      _builder.newLine();
      _builder.append("multiply(2,multiply(2, 3));");
      _builder.newLine();
      _builder.append("def multiply(a, b) : a * b;");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1[label=\"multiply(2,multiply(2, 3))\" tooltip=12 shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// forward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=vee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// backward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("edge[arrowhead=normal color=green4 style=dashed]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// subgraphs");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("subgraph cluster_multiply {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label=\"multiply\"");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2[label=\"*\"]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("3[label=\"a\" shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("4[label=\"b\" shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2->3");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2->4");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test17() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module arithmetics");
      _builder.newLine();
      _builder.newLine();
      _builder.append("def fun(a,b) : a * b;");
      _builder.newLine();
      _builder.append("fun(2, fun(3,4));");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1[label=\"fun(2, fun(3,4))\" tooltip=24 shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// forward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=vee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// backward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("edge[arrowhead=normal color=green4 style=dashed]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// subgraphs");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("subgraph cluster_fun {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label=\"fun\"");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2[label=\"*\"]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("3[label=\"a\" shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("4[label=\"b\" shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2->3");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2->4");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void test18() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module arithmetics");
      _builder.newLine();
      _builder.newLine();
      _builder.append("def fun(a,b) : a * b;");
      _builder.newLine();
      _builder.append("fun(2, fun(3,4)) / (1-2+3);");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("digraph {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("node[shape=square style=\"bold, filled\" fillcolor=\"orange\"]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// nodes");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1[label=\"/\" tooltip=12]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("2[label=\"fun(2, fun(3,4))\" tooltip=24 shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("3[label=\"+\" tooltip=2]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("4[label=\"-\" tooltip=-1]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("5[label=\"1\" tooltip=1 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("6[label=\"2\" tooltip=2 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("7[label=\"3\" tooltip=3 shape=circle]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// forward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("edge[arrowhead=vee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->2");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("1->3");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("3->4");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("3->7");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("4->5");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("4->6");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// backward edges");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("edge[arrowhead=normal color=green4 style=dashed]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2->1[label=24]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("3->1[label=2]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("4->3[label=-1]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("7->3[label=3]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("5->4[label=1]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("6->4[label=2]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("// subgraphs");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("subgraph cluster_fun {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("label=\"fun\"");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("8[label=\"*\"]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("9[label=\"a\" shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("10[label=\"b\" shape=box]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("8->9");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("8->10");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
